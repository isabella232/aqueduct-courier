// Code generated by counterfeiter. DO NOT EDIT.
package credhubfakes

import (
	"io"
	"sync"

	"github.com/pivotal-cf/aqueduct-courier/credhub"
)

type FakeCredhubService struct {
	CertificatesStub        func() (io.Reader, error)
	certificatesMutex       sync.RWMutex
	certificatesArgsForCall []struct{}
	certificatesReturns     struct {
		result1 io.Reader
		result2 error
	}
	certificatesReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubService) Certificates() (io.Reader, error) {
	fake.certificatesMutex.Lock()
	ret, specificReturn := fake.certificatesReturnsOnCall[len(fake.certificatesArgsForCall)]
	fake.certificatesArgsForCall = append(fake.certificatesArgsForCall, struct{}{})
	fake.recordInvocation("Certificates", []interface{}{})
	fake.certificatesMutex.Unlock()
	if fake.CertificatesStub != nil {
		return fake.CertificatesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.certificatesReturns.result1, fake.certificatesReturns.result2
}

func (fake *FakeCredhubService) CertificatesCallCount() int {
	fake.certificatesMutex.RLock()
	defer fake.certificatesMutex.RUnlock()
	return len(fake.certificatesArgsForCall)
}

func (fake *FakeCredhubService) CertificatesReturns(result1 io.Reader, result2 error) {
	fake.CertificatesStub = nil
	fake.certificatesReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubService) CertificatesReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.CertificatesStub = nil
	if fake.certificatesReturnsOnCall == nil {
		fake.certificatesReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.certificatesReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.certificatesMutex.RLock()
	defer fake.certificatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhubService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credhub.CredhubService = new(FakeCredhubService)
