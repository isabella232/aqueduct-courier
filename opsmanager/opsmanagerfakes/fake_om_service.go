// Code generated by counterfeiter. DO NOT EDIT.
package opsmanagerfakes

import (
	"io"
	"sync"

	"github.com/pivotal-cf/aqueduct-courier/opsmanager"
)

type FakeOmService struct {
	ProductResourcesStub        func(guid string) (io.Reader, error)
	productResourcesMutex       sync.RWMutex
	productResourcesArgsForCall []struct {
		guid string
	}
	productResourcesReturns struct {
		result1 io.Reader
		result2 error
	}
	productResourcesReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	DirectorPropertiesStub        func() (io.Reader, error)
	directorPropertiesMutex       sync.RWMutex
	directorPropertiesArgsForCall []struct{}
	directorPropertiesReturns     struct {
		result1 io.Reader
		result2 error
	}
	directorPropertiesReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	VmTypesStub        func() (io.Reader, error)
	vmTypesMutex       sync.RWMutex
	vmTypesArgsForCall []struct{}
	vmTypesReturns     struct {
		result1 io.Reader
		result2 error
	}
	vmTypesReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	DiagnosticReportStub        func() (io.Reader, error)
	diagnosticReportMutex       sync.RWMutex
	diagnosticReportArgsForCall []struct{}
	diagnosticReportReturns     struct {
		result1 io.Reader
		result2 error
	}
	diagnosticReportReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOmService) ProductResources(guid string) (io.Reader, error) {
	fake.productResourcesMutex.Lock()
	ret, specificReturn := fake.productResourcesReturnsOnCall[len(fake.productResourcesArgsForCall)]
	fake.productResourcesArgsForCall = append(fake.productResourcesArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("ProductResources", []interface{}{guid})
	fake.productResourcesMutex.Unlock()
	if fake.ProductResourcesStub != nil {
		return fake.ProductResourcesStub(guid)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.productResourcesReturns.result1, fake.productResourcesReturns.result2
}

func (fake *FakeOmService) ProductResourcesCallCount() int {
	fake.productResourcesMutex.RLock()
	defer fake.productResourcesMutex.RUnlock()
	return len(fake.productResourcesArgsForCall)
}

func (fake *FakeOmService) ProductResourcesArgsForCall(i int) string {
	fake.productResourcesMutex.RLock()
	defer fake.productResourcesMutex.RUnlock()
	return fake.productResourcesArgsForCall[i].guid
}

func (fake *FakeOmService) ProductResourcesReturns(result1 io.Reader, result2 error) {
	fake.ProductResourcesStub = nil
	fake.productResourcesReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) ProductResourcesReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.ProductResourcesStub = nil
	if fake.productResourcesReturnsOnCall == nil {
		fake.productResourcesReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.productResourcesReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) DirectorProperties() (io.Reader, error) {
	fake.directorPropertiesMutex.Lock()
	ret, specificReturn := fake.directorPropertiesReturnsOnCall[len(fake.directorPropertiesArgsForCall)]
	fake.directorPropertiesArgsForCall = append(fake.directorPropertiesArgsForCall, struct{}{})
	fake.recordInvocation("DirectorProperties", []interface{}{})
	fake.directorPropertiesMutex.Unlock()
	if fake.DirectorPropertiesStub != nil {
		return fake.DirectorPropertiesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.directorPropertiesReturns.result1, fake.directorPropertiesReturns.result2
}

func (fake *FakeOmService) DirectorPropertiesCallCount() int {
	fake.directorPropertiesMutex.RLock()
	defer fake.directorPropertiesMutex.RUnlock()
	return len(fake.directorPropertiesArgsForCall)
}

func (fake *FakeOmService) DirectorPropertiesReturns(result1 io.Reader, result2 error) {
	fake.DirectorPropertiesStub = nil
	fake.directorPropertiesReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) DirectorPropertiesReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.DirectorPropertiesStub = nil
	if fake.directorPropertiesReturnsOnCall == nil {
		fake.directorPropertiesReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.directorPropertiesReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) VmTypes() (io.Reader, error) {
	fake.vmTypesMutex.Lock()
	ret, specificReturn := fake.vmTypesReturnsOnCall[len(fake.vmTypesArgsForCall)]
	fake.vmTypesArgsForCall = append(fake.vmTypesArgsForCall, struct{}{})
	fake.recordInvocation("VmTypes", []interface{}{})
	fake.vmTypesMutex.Unlock()
	if fake.VmTypesStub != nil {
		return fake.VmTypesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.vmTypesReturns.result1, fake.vmTypesReturns.result2
}

func (fake *FakeOmService) VmTypesCallCount() int {
	fake.vmTypesMutex.RLock()
	defer fake.vmTypesMutex.RUnlock()
	return len(fake.vmTypesArgsForCall)
}

func (fake *FakeOmService) VmTypesReturns(result1 io.Reader, result2 error) {
	fake.VmTypesStub = nil
	fake.vmTypesReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) VmTypesReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.VmTypesStub = nil
	if fake.vmTypesReturnsOnCall == nil {
		fake.vmTypesReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.vmTypesReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) DiagnosticReport() (io.Reader, error) {
	fake.diagnosticReportMutex.Lock()
	ret, specificReturn := fake.diagnosticReportReturnsOnCall[len(fake.diagnosticReportArgsForCall)]
	fake.diagnosticReportArgsForCall = append(fake.diagnosticReportArgsForCall, struct{}{})
	fake.recordInvocation("DiagnosticReport", []interface{}{})
	fake.diagnosticReportMutex.Unlock()
	if fake.DiagnosticReportStub != nil {
		return fake.DiagnosticReportStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.diagnosticReportReturns.result1, fake.diagnosticReportReturns.result2
}

func (fake *FakeOmService) DiagnosticReportCallCount() int {
	fake.diagnosticReportMutex.RLock()
	defer fake.diagnosticReportMutex.RUnlock()
	return len(fake.diagnosticReportArgsForCall)
}

func (fake *FakeOmService) DiagnosticReportReturns(result1 io.Reader, result2 error) {
	fake.DiagnosticReportStub = nil
	fake.diagnosticReportReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) DiagnosticReportReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.DiagnosticReportStub = nil
	if fake.diagnosticReportReturnsOnCall == nil {
		fake.diagnosticReportReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.diagnosticReportReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.productResourcesMutex.RLock()
	defer fake.productResourcesMutex.RUnlock()
	fake.directorPropertiesMutex.RLock()
	defer fake.directorPropertiesMutex.RUnlock()
	fake.vmTypesMutex.RLock()
	defer fake.vmTypesMutex.RUnlock()
	fake.diagnosticReportMutex.RLock()
	defer fake.diagnosticReportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOmService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ opsmanager.OmService = new(FakeOmService)
