// Code generated by counterfeiter. DO NOT EDIT.
package filefakes

import (
	"io"
	"sync"
)

type FakeData struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	ContentStub        func() io.Reader
	contentMutex       sync.RWMutex
	contentArgsForCall []struct{}
	contentReturns     struct {
		result1 io.Reader
	}
	contentReturnsOnCall map[int]struct {
		result1 io.Reader
	}
	ContentTypeStub        func() string
	contentTypeMutex       sync.RWMutex
	contentTypeArgsForCall []struct{}
	contentTypeReturns     struct {
		result1 string
	}
	contentTypeReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeData) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeData) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeData) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeData) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeData) Content() io.Reader {
	fake.contentMutex.Lock()
	ret, specificReturn := fake.contentReturnsOnCall[len(fake.contentArgsForCall)]
	fake.contentArgsForCall = append(fake.contentArgsForCall, struct{}{})
	fake.recordInvocation("Content", []interface{}{})
	fake.contentMutex.Unlock()
	if fake.ContentStub != nil {
		return fake.ContentStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.contentReturns.result1
}

func (fake *FakeData) ContentCallCount() int {
	fake.contentMutex.RLock()
	defer fake.contentMutex.RUnlock()
	return len(fake.contentArgsForCall)
}

func (fake *FakeData) ContentReturns(result1 io.Reader) {
	fake.ContentStub = nil
	fake.contentReturns = struct {
		result1 io.Reader
	}{result1}
}

func (fake *FakeData) ContentReturnsOnCall(i int, result1 io.Reader) {
	fake.ContentStub = nil
	if fake.contentReturnsOnCall == nil {
		fake.contentReturnsOnCall = make(map[int]struct {
			result1 io.Reader
		})
	}
	fake.contentReturnsOnCall[i] = struct {
		result1 io.Reader
	}{result1}
}

func (fake *FakeData) ContentType() string {
	fake.contentTypeMutex.Lock()
	ret, specificReturn := fake.contentTypeReturnsOnCall[len(fake.contentTypeArgsForCall)]
	fake.contentTypeArgsForCall = append(fake.contentTypeArgsForCall, struct{}{})
	fake.recordInvocation("ContentType", []interface{}{})
	fake.contentTypeMutex.Unlock()
	if fake.ContentTypeStub != nil {
		return fake.ContentTypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.contentTypeReturns.result1
}

func (fake *FakeData) ContentTypeCallCount() int {
	fake.contentTypeMutex.RLock()
	defer fake.contentTypeMutex.RUnlock()
	return len(fake.contentTypeArgsForCall)
}

func (fake *FakeData) ContentTypeReturns(result1 string) {
	fake.ContentTypeStub = nil
	fake.contentTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeData) ContentTypeReturnsOnCall(i int, result1 string) {
	fake.ContentTypeStub = nil
	if fake.contentTypeReturnsOnCall == nil {
		fake.contentTypeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.contentTypeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeData) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.contentMutex.RLock()
	defer fake.contentMutex.RUnlock()
	fake.contentTypeMutex.RLock()
	defer fake.contentTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeData) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
